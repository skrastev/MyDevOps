---
- name: Ensure Java is installed.
  apt:
    name: "{{ java_packages }}"
    state: present

- name: Add Jenkins apt repository key.
  apt_key:
    url: "{{ jenkins_repo_key_url }}"
    state: present

- name: Add Jenkins apt repository.
  apt_repository:
    repo: "{{ jenkins_repo_url }}"
    state: present
    filename: jenkins
    update_cache: yes

- name: Install Jenkins server
  apt:
    name: jenkins
    update_cache: yes
    state: present

- name: read admin pwd
  shell: cat /var/lib/jenkins/secrets/initialAdminPassword
  register: adminpwd
  become: yes

- name: unlock and add admin user
  jenkins_script:
    script: |
      import jenkins.model.*
      import hudson.security.*
      def instance = Jenkins.getInstance()
      def hudsonRealm = new HudsonPrivateSecurityRealm(false)
      hudsonRealm.createAccount('jenkins', '${user_pwd}')
      instance.setSecurityRealm(hudsonRealm)
      def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
      strategy.setAllowAnonymousRead(false)
      instance.setAuthorizationStrategy(strategy)
      instance.save()
    args:
      user_pwd: "{{ admin_user_pass }}"
    user: admin
    password: "{{ adminpwd.stdout }}"

- name: complete setup wizard
  jenkins_script:
    script: |
      import static jenkins.model.Jenkins.instance as jenkins
      import jenkins.install.InstallState
      if (!jenkins.installState.isSetupComplete()) {
        InstallState.INITIAL_SETUP_COMPLETED.initializeState()
      }
    user: admin
    password: "{{ adminpwd.stdout }}"

- name: install plugin
  jenkins_plugin:
    name: "{{ item }}"
    state: latest
    url_username: admin
    url_password: "{{ adminpwd.stdout }}"
  with_items: "{{ jenkins_plugins }}"
  tags: jenkins_plugin
